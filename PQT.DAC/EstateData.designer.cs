#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PQT.DAC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "locnhungdongnai")]
	public partial class EstateDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEstate(Estate instance);
    partial void UpdateEstate(Estate instance);
    partial void DeleteEstate(Estate instance);
    partial void InsertEstateToCategory(EstateToCategory instance);
    partial void UpdateEstateToCategory(EstateToCategory instance);
    partial void DeleteEstateToCategory(EstateToCategory instance);
    partial void InsertEstateBaseCode(EstateBaseCode instance);
    partial void UpdateEstateBaseCode(EstateBaseCode instance);
    partial void DeleteEstateBaseCode(EstateBaseCode instance);
    partial void InsertEstateCategory(EstateCategory instance);
    partial void UpdateEstateCategory(EstateCategory instance);
    partial void DeleteEstateCategory(EstateCategory instance);
    partial void InsertEstateCategoryDescription(EstateCategoryDescription instance);
    partial void UpdateEstateCategoryDescription(EstateCategoryDescription instance);
    partial void DeleteEstateCategoryDescription(EstateCategoryDescription instance);
    partial void InsertEstateCustomer(EstateCustomer instance);
    partial void UpdateEstateCustomer(EstateCustomer instance);
    partial void DeleteEstateCustomer(EstateCustomer instance);
    partial void InsertEstateDescription(EstateDescription instance);
    partial void UpdateEstateDescription(EstateDescription instance);
    partial void DeleteEstateDescription(EstateDescription instance);
    partial void InsertEstateDetail(EstateDetail instance);
    partial void UpdateEstateDetail(EstateDetail instance);
    partial void DeleteEstateDetail(EstateDetail instance);
    partial void InsertEstateDetailDescription(EstateDetailDescription instance);
    partial void UpdateEstateDetailDescription(EstateDetailDescription instance);
    partial void DeleteEstateDetailDescription(EstateDetailDescription instance);
    partial void InsertEstateGroupBaseCode(EstateGroupBaseCode instance);
    partial void UpdateEstateGroupBaseCode(EstateGroupBaseCode instance);
    partial void DeleteEstateGroupBaseCode(EstateGroupBaseCode instance);
    partial void InsertEstateImage(EstateImage instance);
    partial void UpdateEstateImage(EstateImage instance);
    partial void DeleteEstateImage(EstateImage instance);
    partial void InsertEstateRoomNumber(EstateRoomNumber instance);
    partial void UpdateEstateRoomNumber(EstateRoomNumber instance);
    partial void DeleteEstateRoomNumber(EstateRoomNumber instance);
    #endregion
		
		public EstateDataDataContext() :
        base(global::PQT.DAC.Properties.Settings.Default.Quanlynhansu_nkcn_2018ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EstateDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EstateDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EstateDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EstateDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Estate> Estates
		{
			get
			{
				return this.GetTable<Estate>();
			}
		}
		
		public System.Data.Linq.Table<EstateToCategory> EstateToCategories
		{
			get
			{
				return this.GetTable<EstateToCategory>();
			}
		}
		
		public System.Data.Linq.Table<EstateBaseCode> EstateBaseCodes
		{
			get
			{
				return this.GetTable<EstateBaseCode>();
			}
		}
		
		public System.Data.Linq.Table<EstateCategory> EstateCategories
		{
			get
			{
				return this.GetTable<EstateCategory>();
			}
		}
		
		public System.Data.Linq.Table<EstateCategoryDescription> EstateCategoryDescriptions
		{
			get
			{
				return this.GetTable<EstateCategoryDescription>();
			}
		}
		
		public System.Data.Linq.Table<EstateCustomer> EstateCustomers
		{
			get
			{
				return this.GetTable<EstateCustomer>();
			}
		}
		
		public System.Data.Linq.Table<EstateDescription> EstateDescriptions
		{
			get
			{
				return this.GetTable<EstateDescription>();
			}
		}
		
		public System.Data.Linq.Table<EstateDetail> EstateDetails
		{
			get
			{
				return this.GetTable<EstateDetail>();
			}
		}
		
		public System.Data.Linq.Table<EstateDetailDescription> EstateDetailDescriptions
		{
			get
			{
				return this.GetTable<EstateDetailDescription>();
			}
		}
		
		public System.Data.Linq.Table<EstateGroupBaseCode> EstateGroupBaseCodes
		{
			get
			{
				return this.GetTable<EstateGroupBaseCode>();
			}
		}
		
		public System.Data.Linq.Table<EstateImage> EstateImages
		{
			get
			{
				return this.GetTable<EstateImage>();
			}
		}
		
		public System.Data.Linq.Table<EstateRoomNumber> EstateRoomNumbers
		{
			get
			{
				return this.GetTable<EstateRoomNumber>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Estate")]
	public partial class Estate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EstateID;
		
		private System.Nullable<int> _AreaID;
		
		private System.Nullable<int> _AreaID1;
		
		private System.Nullable<int> _SortOrder;
		
		private string _Name;
		
		private System.Nullable<decimal> _Price1;
		
		private System.Nullable<decimal> _Price2;
		
		private string _PriceText;
		
		private string _Address;
		
		private System.Nullable<double> _XSize;
		
		private System.Nullable<double> _YSize;
		
		private System.Nullable<double> _TotalSize;
		
		private string _UseSize;
		
		private System.Nullable<int> _DirectionID;
		
		private System.Nullable<int> _CustomerID;
		
		private string _Image;
		
		private string _UltilityString;
		
		private System.Nullable<System.DateTime> _PostDate;
		
		private System.Nullable<System.DateTime> _ViewDate;
		
		private System.Nullable<int> _PostTime;
		
		private System.Nullable<bool> _Status;
		
		private string _NewsType;
		
		private System.Nullable<int> _CurrencyID;
		
		private EntitySet<EstateToCategory> _EstateToCategories;
		
		private EntitySet<EstateDescription> _EstateDescriptions;
		
		private EntitySet<EstateImage> _EstateImages;
		
		private EntityRef<EstateCustomer> _EstateCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEstateIDChanging(long value);
    partial void OnEstateIDChanged();
    partial void OnAreaIDChanging(System.Nullable<int> value);
    partial void OnAreaIDChanged();
    partial void OnAreaID1Changing(System.Nullable<int> value);
    partial void OnAreaID1Changed();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPrice1Changing(System.Nullable<decimal> value);
    partial void OnPrice1Changed();
    partial void OnPrice2Changing(System.Nullable<decimal> value);
    partial void OnPrice2Changed();
    partial void OnPriceTextChanging(string value);
    partial void OnPriceTextChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnXSizeChanging(System.Nullable<double> value);
    partial void OnXSizeChanged();
    partial void OnYSizeChanging(System.Nullable<double> value);
    partial void OnYSizeChanged();
    partial void OnTotalSizeChanging(System.Nullable<double> value);
    partial void OnTotalSizeChanged();
    partial void OnUseSizeChanging(string value);
    partial void OnUseSizeChanged();
    partial void OnDirectionIDChanging(System.Nullable<int> value);
    partial void OnDirectionIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnUltilityStringChanging(string value);
    partial void OnUltilityStringChanged();
    partial void OnPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostDateChanged();
    partial void OnViewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnViewDateChanged();
    partial void OnPostTimeChanging(System.Nullable<int> value);
    partial void OnPostTimeChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnNewsTypeChanging(string value);
    partial void OnNewsTypeChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    #endregion
		
		public Estate()
		{
			this._EstateToCategories = new EntitySet<EstateToCategory>(new Action<EstateToCategory>(this.attach_EstateToCategories), new Action<EstateToCategory>(this.detach_EstateToCategories));
			this._EstateDescriptions = new EntitySet<EstateDescription>(new Action<EstateDescription>(this.attach_EstateDescriptions), new Action<EstateDescription>(this.detach_EstateDescriptions));
			this._EstateImages = new EntitySet<EstateImage>(new Action<EstateImage>(this.attach_EstateImages), new Action<EstateImage>(this.detach_EstateImages));
			this._EstateCustomer = default(EntityRef<EstateCustomer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EstateID
		{
			get
			{
				return this._EstateID;
			}
			set
			{
				if ((this._EstateID != value))
				{
					this.OnEstateIDChanging(value);
					this.SendPropertyChanging();
					this._EstateID = value;
					this.SendPropertyChanged("EstateID");
					this.OnEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="Int")]
		public System.Nullable<int> AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID1", DbType="Int")]
		public System.Nullable<int> AreaID1
		{
			get
			{
				return this._AreaID1;
			}
			set
			{
				if ((this._AreaID1 != value))
				{
					this.OnAreaID1Changing(value);
					this.SendPropertyChanging();
					this._AreaID1 = value;
					this.SendPropertyChanged("AreaID1");
					this.OnAreaID1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price1", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Price1
		{
			get
			{
				return this._Price1;
			}
			set
			{
				if ((this._Price1 != value))
				{
					this.OnPrice1Changing(value);
					this.SendPropertyChanging();
					this._Price1 = value;
					this.SendPropertyChanged("Price1");
					this.OnPrice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price2", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Price2
		{
			get
			{
				return this._Price2;
			}
			set
			{
				if ((this._Price2 != value))
				{
					this.OnPrice2Changing(value);
					this.SendPropertyChanging();
					this._Price2 = value;
					this.SendPropertyChanged("Price2");
					this.OnPrice2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceText", DbType="NVarChar(50)")]
		public string PriceText
		{
			get
			{
				return this._PriceText;
			}
			set
			{
				if ((this._PriceText != value))
				{
					this.OnPriceTextChanging(value);
					this.SendPropertyChanging();
					this._PriceText = value;
					this.SendPropertyChanged("PriceText");
					this.OnPriceTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XSize", DbType="Float")]
		public System.Nullable<double> XSize
		{
			get
			{
				return this._XSize;
			}
			set
			{
				if ((this._XSize != value))
				{
					this.OnXSizeChanging(value);
					this.SendPropertyChanging();
					this._XSize = value;
					this.SendPropertyChanged("XSize");
					this.OnXSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YSize", DbType="Float")]
		public System.Nullable<double> YSize
		{
			get
			{
				return this._YSize;
			}
			set
			{
				if ((this._YSize != value))
				{
					this.OnYSizeChanging(value);
					this.SendPropertyChanging();
					this._YSize = value;
					this.SendPropertyChanged("YSize");
					this.OnYSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSize", DbType="Float")]
		public System.Nullable<double> TotalSize
		{
			get
			{
				return this._TotalSize;
			}
			set
			{
				if ((this._TotalSize != value))
				{
					this.OnTotalSizeChanging(value);
					this.SendPropertyChanging();
					this._TotalSize = value;
					this.SendPropertyChanged("TotalSize");
					this.OnTotalSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseSize", DbType="NVarChar(200)")]
		public string UseSize
		{
			get
			{
				return this._UseSize;
			}
			set
			{
				if ((this._UseSize != value))
				{
					this.OnUseSizeChanging(value);
					this.SendPropertyChanging();
					this._UseSize = value;
					this.SendPropertyChanged("UseSize");
					this.OnUseSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectionID", DbType="Int")]
		public System.Nullable<int> DirectionID
		{
			get
			{
				return this._DirectionID;
			}
			set
			{
				if ((this._DirectionID != value))
				{
					this.OnDirectionIDChanging(value);
					this.SendPropertyChanging();
					this._DirectionID = value;
					this.SendPropertyChanged("DirectionID");
					this.OnDirectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._EstateCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(100)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UltilityString", DbType="NVarChar(200)")]
		public string UltilityString
		{
			get
			{
				return this._UltilityString;
			}
			set
			{
				if ((this._UltilityString != value))
				{
					this.OnUltilityStringChanging(value);
					this.SendPropertyChanging();
					this._UltilityString = value;
					this.SendPropertyChanged("UltilityString");
					this.OnUltilityStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ViewDate
		{
			get
			{
				return this._ViewDate;
			}
			set
			{
				if ((this._ViewDate != value))
				{
					this.OnViewDateChanging(value);
					this.SendPropertyChanging();
					this._ViewDate = value;
					this.SendPropertyChanged("ViewDate");
					this.OnViewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostTime", DbType="Int")]
		public System.Nullable<int> PostTime
		{
			get
			{
				return this._PostTime;
			}
			set
			{
				if ((this._PostTime != value))
				{
					this.OnPostTimeChanging(value);
					this.SendPropertyChanging();
					this._PostTime = value;
					this.SendPropertyChanged("PostTime");
					this.OnPostTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsType", DbType="NVarChar(50)")]
		public string NewsType
		{
			get
			{
				return this._NewsType;
			}
			set
			{
				if ((this._NewsType != value))
				{
					this.OnNewsTypeChanging(value);
					this.SendPropertyChanging();
					this._NewsType = value;
					this.SendPropertyChanged("NewsType");
					this.OnNewsTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int")]
		public System.Nullable<int> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estate_EstateToCategory", Storage="_EstateToCategories", ThisKey="EstateID", OtherKey="EstateID")]
		public EntitySet<EstateToCategory> EstateToCategories
		{
			get
			{
				return this._EstateToCategories;
			}
			set
			{
				this._EstateToCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estate_EstateDescription", Storage="_EstateDescriptions", ThisKey="EstateID", OtherKey="EstateID")]
		public EntitySet<EstateDescription> EstateDescriptions
		{
			get
			{
				return this._EstateDescriptions;
			}
			set
			{
				this._EstateDescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estate_EstateImage", Storage="_EstateImages", ThisKey="EstateID", OtherKey="EstateID")]
		public EntitySet<EstateImage> EstateImages
		{
			get
			{
				return this._EstateImages;
			}
			set
			{
				this._EstateImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EstateCustomer_Estate", Storage="_EstateCustomer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public EstateCustomer EstateCustomer
		{
			get
			{
				return this._EstateCustomer.Entity;
			}
			set
			{
				EstateCustomer previousValue = this._EstateCustomer.Entity;
				if (((previousValue != value) 
							|| (this._EstateCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EstateCustomer.Entity = null;
						previousValue.Estates.Remove(this);
					}
					this._EstateCustomer.Entity = value;
					if ((value != null))
					{
						value.Estates.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EstateCustomer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EstateToCategories(EstateToCategory entity)
		{
			this.SendPropertyChanging();
			entity.Estate = this;
		}
		
		private void detach_EstateToCategories(EstateToCategory entity)
		{
			this.SendPropertyChanging();
			entity.Estate = null;
		}
		
		private void attach_EstateDescriptions(EstateDescription entity)
		{
			this.SendPropertyChanging();
			entity.Estate = this;
		}
		
		private void detach_EstateDescriptions(EstateDescription entity)
		{
			this.SendPropertyChanging();
			entity.Estate = null;
		}
		
		private void attach_EstateImages(EstateImage entity)
		{
			this.SendPropertyChanging();
			entity.Estate = this;
		}
		
		private void detach_EstateImages(EstateImage entity)
		{
			this.SendPropertyChanging();
			entity.Estate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateToCategory")]
	public partial class EstateToCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EstateCategoryID;
		
		private long _EstateID;
		
		private EntityRef<Estate> _Estate;
		
		private EntityRef<EstateCategory> _EstateCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEstateCategoryIDChanging(int value);
    partial void OnEstateCategoryIDChanged();
    partial void OnEstateIDChanging(long value);
    partial void OnEstateIDChanged();
    #endregion
		
		public EstateToCategory()
		{
			this._Estate = default(EntityRef<Estate>);
			this._EstateCategory = default(EntityRef<EstateCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EstateCategoryID
		{
			get
			{
				return this._EstateCategoryID;
			}
			set
			{
				if ((this._EstateCategoryID != value))
				{
					if (this._EstateCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEstateCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._EstateCategoryID = value;
					this.SendPropertyChanged("EstateCategoryID");
					this.OnEstateCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EstateID
		{
			get
			{
				return this._EstateID;
			}
			set
			{
				if ((this._EstateID != value))
				{
					if (this._Estate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEstateIDChanging(value);
					this.SendPropertyChanging();
					this._EstateID = value;
					this.SendPropertyChanged("EstateID");
					this.OnEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estate_EstateToCategory", Storage="_Estate", ThisKey="EstateID", OtherKey="EstateID", IsForeignKey=true)]
		public Estate Estate
		{
			get
			{
				return this._Estate.Entity;
			}
			set
			{
				Estate previousValue = this._Estate.Entity;
				if (((previousValue != value) 
							|| (this._Estate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estate.Entity = null;
						previousValue.EstateToCategories.Remove(this);
					}
					this._Estate.Entity = value;
					if ((value != null))
					{
						value.EstateToCategories.Add(this);
						this._EstateID = value.EstateID;
					}
					else
					{
						this._EstateID = default(long);
					}
					this.SendPropertyChanged("Estate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EstateCategory_EstateToCategory", Storage="_EstateCategory", ThisKey="EstateCategoryID", OtherKey="EstateCategoryID", IsForeignKey=true)]
		public EstateCategory EstateCategory
		{
			get
			{
				return this._EstateCategory.Entity;
			}
			set
			{
				EstateCategory previousValue = this._EstateCategory.Entity;
				if (((previousValue != value) 
							|| (this._EstateCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EstateCategory.Entity = null;
						previousValue.EstateToCategories.Remove(this);
					}
					this._EstateCategory.Entity = value;
					if ((value != null))
					{
						value.EstateToCategories.Add(this);
						this._EstateCategoryID = value.EstateCategoryID;
					}
					else
					{
						this._EstateCategoryID = default(int);
					}
					this.SendPropertyChanged("EstateCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateBaseCode")]
	public partial class EstateBaseCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BaseID;
		
		private System.Nullable<int> _GroupID;
		
		private string _Name;
		
		private string _SortOrder;
		
		private string _Option1;
		
		private string _Option2;
		
		private string _Option3;
		
		private EntityRef<EstateGroupBaseCode> _EstateGroupBaseCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBaseIDChanging(int value);
    partial void OnBaseIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSortOrderChanging(string value);
    partial void OnSortOrderChanged();
    partial void OnOption1Changing(string value);
    partial void OnOption1Changed();
    partial void OnOption2Changing(string value);
    partial void OnOption2Changed();
    partial void OnOption3Changing(string value);
    partial void OnOption3Changed();
    #endregion
		
		public EstateBaseCode()
		{
			this._EstateGroupBaseCode = default(EntityRef<EstateGroupBaseCode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BaseID
		{
			get
			{
				return this._BaseID;
			}
			set
			{
				if ((this._BaseID != value))
				{
					this.OnBaseIDChanging(value);
					this.SendPropertyChanging();
					this._BaseID = value;
					this.SendPropertyChanged("BaseID");
					this.OnBaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._EstateGroupBaseCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="NChar(10)")]
		public string SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Option1", DbType="NVarChar(250)")]
		public string Option1
		{
			get
			{
				return this._Option1;
			}
			set
			{
				if ((this._Option1 != value))
				{
					this.OnOption1Changing(value);
					this.SendPropertyChanging();
					this._Option1 = value;
					this.SendPropertyChanged("Option1");
					this.OnOption1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Option2", DbType="NVarChar(250)")]
		public string Option2
		{
			get
			{
				return this._Option2;
			}
			set
			{
				if ((this._Option2 != value))
				{
					this.OnOption2Changing(value);
					this.SendPropertyChanging();
					this._Option2 = value;
					this.SendPropertyChanged("Option2");
					this.OnOption2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Option3", DbType="NVarChar(250)")]
		public string Option3
		{
			get
			{
				return this._Option3;
			}
			set
			{
				if ((this._Option3 != value))
				{
					this.OnOption3Changing(value);
					this.SendPropertyChanging();
					this._Option3 = value;
					this.SendPropertyChanged("Option3");
					this.OnOption3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EstateGroupBaseCode_EstateBaseCode", Storage="_EstateGroupBaseCode", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public EstateGroupBaseCode EstateGroupBaseCode
		{
			get
			{
				return this._EstateGroupBaseCode.Entity;
			}
			set
			{
				EstateGroupBaseCode previousValue = this._EstateGroupBaseCode.Entity;
				if (((previousValue != value) 
							|| (this._EstateGroupBaseCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EstateGroupBaseCode.Entity = null;
						previousValue.EstateBaseCodes.Remove(this);
					}
					this._EstateGroupBaseCode.Entity = value;
					if ((value != null))
					{
						value.EstateBaseCodes.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EstateGroupBaseCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateCategory")]
	public partial class EstateCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EstateCategoryID;
		
		private System.Nullable<int> _ParentID;
		
		private System.Nullable<bool> _Status;
		
		private string _UniqueKey;
		
		private System.Nullable<int> _SortOrder;
		
		private System.Nullable<long> _Image;
		
		private EntitySet<EstateToCategory> _EstateToCategories;
		
		private EntitySet<EstateCategoryDescription> _EstateCategoryDescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEstateCategoryIDChanging(int value);
    partial void OnEstateCategoryIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnUniqueKeyChanging(string value);
    partial void OnUniqueKeyChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnImageChanging(System.Nullable<long> value);
    partial void OnImageChanged();
    #endregion
		
		public EstateCategory()
		{
			this._EstateToCategories = new EntitySet<EstateToCategory>(new Action<EstateToCategory>(this.attach_EstateToCategories), new Action<EstateToCategory>(this.detach_EstateToCategories));
			this._EstateCategoryDescriptions = new EntitySet<EstateCategoryDescription>(new Action<EstateCategoryDescription>(this.attach_EstateCategoryDescriptions), new Action<EstateCategoryDescription>(this.detach_EstateCategoryDescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EstateCategoryID
		{
			get
			{
				return this._EstateCategoryID;
			}
			set
			{
				if ((this._EstateCategoryID != value))
				{
					this.OnEstateCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._EstateCategoryID = value;
					this.SendPropertyChanged("EstateCategoryID");
					this.OnEstateCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueKey", DbType="NVarChar(50)")]
		public string UniqueKey
		{
			get
			{
				return this._UniqueKey;
			}
			set
			{
				if ((this._UniqueKey != value))
				{
					this.OnUniqueKeyChanging(value);
					this.SendPropertyChanging();
					this._UniqueKey = value;
					this.SendPropertyChanged("UniqueKey");
					this.OnUniqueKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="BigInt")]
		public System.Nullable<long> Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EstateCategory_EstateToCategory", Storage="_EstateToCategories", ThisKey="EstateCategoryID", OtherKey="EstateCategoryID")]
		public EntitySet<EstateToCategory> EstateToCategories
		{
			get
			{
				return this._EstateToCategories;
			}
			set
			{
				this._EstateToCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EstateCategory_EstateCategoryDescription", Storage="_EstateCategoryDescriptions", ThisKey="EstateCategoryID", OtherKey="EstateCategoryID")]
		public EntitySet<EstateCategoryDescription> EstateCategoryDescriptions
		{
			get
			{
				return this._EstateCategoryDescriptions;
			}
			set
			{
				this._EstateCategoryDescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EstateToCategories(EstateToCategory entity)
		{
			this.SendPropertyChanging();
			entity.EstateCategory = this;
		}
		
		private void detach_EstateToCategories(EstateToCategory entity)
		{
			this.SendPropertyChanging();
			entity.EstateCategory = null;
		}
		
		private void attach_EstateCategoryDescriptions(EstateCategoryDescription entity)
		{
			this.SendPropertyChanging();
			entity.EstateCategory = this;
		}
		
		private void detach_EstateCategoryDescriptions(EstateCategoryDescription entity)
		{
			this.SendPropertyChanging();
			entity.EstateCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateCategoryDescription")]
	public partial class EstateCategoryDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EstateCategoryID;
		
		private int _LanguageID;
		
		private string _CategoryName;
		
		private string _Description;
		
		private EntityRef<EstateCategory> _EstateCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEstateCategoryIDChanging(int value);
    partial void OnEstateCategoryIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public EstateCategoryDescription()
		{
			this._EstateCategory = default(EntityRef<EstateCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EstateCategoryID
		{
			get
			{
				return this._EstateCategoryID;
			}
			set
			{
				if ((this._EstateCategoryID != value))
				{
					if (this._EstateCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEstateCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._EstateCategoryID = value;
					this.SendPropertyChanged("EstateCategoryID");
					this.OnEstateCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(350)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EstateCategory_EstateCategoryDescription", Storage="_EstateCategory", ThisKey="EstateCategoryID", OtherKey="EstateCategoryID", IsForeignKey=true)]
		public EstateCategory EstateCategory
		{
			get
			{
				return this._EstateCategory.Entity;
			}
			set
			{
				EstateCategory previousValue = this._EstateCategory.Entity;
				if (((previousValue != value) 
							|| (this._EstateCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EstateCategory.Entity = null;
						previousValue.EstateCategoryDescriptions.Remove(this);
					}
					this._EstateCategory.Entity = value;
					if ((value != null))
					{
						value.EstateCategoryDescriptions.Add(this);
						this._EstateCategoryID = value.EstateCategoryID;
					}
					else
					{
						this._EstateCategoryID = default(int);
					}
					this.SendPropertyChanged("EstateCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateCustomer")]
	public partial class EstateCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _Fullname;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Address;
		
		private System.Nullable<int> _AreaID;
		
		private string _Phone;
		
		private string _Email;
		
		private string _CMND;
		
		private string _Passport;
		
		private EntitySet<Estate> _Estates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAreaIDChanging(System.Nullable<int> value);
    partial void OnAreaIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCMNDChanging(string value);
    partial void OnCMNDChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    #endregion
		
		public EstateCustomer()
		{
			this._Estates = new EntitySet<Estate>(new Action<Estate>(this.attach_Estates), new Action<Estate>(this.detach_Estates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(50)")]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="Int")]
		public System.Nullable<int> AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMND", DbType="NVarChar(50)")]
		public string CMND
		{
			get
			{
				return this._CMND;
			}
			set
			{
				if ((this._CMND != value))
				{
					this.OnCMNDChanging(value);
					this.SendPropertyChanging();
					this._CMND = value;
					this.SendPropertyChanged("CMND");
					this.OnCMNDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50)")]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EstateCustomer_Estate", Storage="_Estates", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<Estate> Estates
		{
			get
			{
				return this._Estates;
			}
			set
			{
				this._Estates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Estates(Estate entity)
		{
			this.SendPropertyChanging();
			entity.EstateCustomer = this;
		}
		
		private void detach_Estates(Estate entity)
		{
			this.SendPropertyChanging();
			entity.EstateCustomer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateDescription")]
	public partial class EstateDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EstateID;
		
		private int _LanguageID;
		
		private string _Title;
		
		private string _SubContent;
		
		private string _Content;
		
		private string _Remark;
		
		private EntityRef<Estate> _Estate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEstateIDChanging(long value);
    partial void OnEstateIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubContentChanging(string value);
    partial void OnSubContentChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public EstateDescription()
		{
			this._Estate = default(EntityRef<Estate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EstateID
		{
			get
			{
				return this._EstateID;
			}
			set
			{
				if ((this._EstateID != value))
				{
					if (this._Estate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEstateIDChanging(value);
					this.SendPropertyChanging();
					this._EstateID = value;
					this.SendPropertyChanged("EstateID");
					this.OnEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubContent", DbType="NVarChar(300)")]
		public string SubContent
		{
			get
			{
				return this._SubContent;
			}
			set
			{
				if ((this._SubContent != value))
				{
					this.OnSubContentChanging(value);
					this.SendPropertyChanging();
					this._SubContent = value;
					this.SendPropertyChanged("SubContent");
					this.OnSubContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estate_EstateDescription", Storage="_Estate", ThisKey="EstateID", OtherKey="EstateID", IsForeignKey=true)]
		public Estate Estate
		{
			get
			{
				return this._Estate.Entity;
			}
			set
			{
				Estate previousValue = this._Estate.Entity;
				if (((previousValue != value) 
							|| (this._Estate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estate.Entity = null;
						previousValue.EstateDescriptions.Remove(this);
					}
					this._Estate.Entity = value;
					if ((value != null))
					{
						value.EstateDescriptions.Add(this);
						this._EstateID = value.EstateID;
					}
					else
					{
						this._EstateID = default(long);
					}
					this.SendPropertyChanged("Estate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateDetail")]
	public partial class EstateDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EstateDetailID;
		
		private System.Nullable<int> _EstateID;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<long> _Image;
		
		private System.Nullable<long> _File1;
		
		private System.Nullable<long> _File2;
		
		private System.Nullable<int> _SortOrder;
		
		private string _Keyword;
		
		private System.Nullable<System.DateTime> _RegDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEstateDetailIDChanging(int value);
    partial void OnEstateDetailIDChanged();
    partial void OnEstateIDChanging(System.Nullable<int> value);
    partial void OnEstateIDChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnImageChanging(System.Nullable<long> value);
    partial void OnImageChanged();
    partial void OnFile1Changing(System.Nullable<long> value);
    partial void OnFile1Changed();
    partial void OnFile2Changing(System.Nullable<long> value);
    partial void OnFile2Changed();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnKeywordChanging(string value);
    partial void OnKeywordChanged();
    partial void OnRegDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegDateChanged();
    #endregion
		
		public EstateDetail()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EstateDetailID
		{
			get
			{
				return this._EstateDetailID;
			}
			set
			{
				if ((this._EstateDetailID != value))
				{
					this.OnEstateDetailIDChanging(value);
					this.SendPropertyChanging();
					this._EstateDetailID = value;
					this.SendPropertyChanged("EstateDetailID");
					this.OnEstateDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateID", DbType="Int")]
		public System.Nullable<int> EstateID
		{
			get
			{
				return this._EstateID;
			}
			set
			{
				if ((this._EstateID != value))
				{
					this.OnEstateIDChanging(value);
					this.SendPropertyChanging();
					this._EstateID = value;
					this.SendPropertyChanged("EstateID");
					this.OnEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="BigInt")]
		public System.Nullable<long> Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File1", DbType="BigInt")]
		public System.Nullable<long> File1
		{
			get
			{
				return this._File1;
			}
			set
			{
				if ((this._File1 != value))
				{
					this.OnFile1Changing(value);
					this.SendPropertyChanging();
					this._File1 = value;
					this.SendPropertyChanged("File1");
					this.OnFile1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File2", DbType="BigInt")]
		public System.Nullable<long> File2
		{
			get
			{
				return this._File2;
			}
			set
			{
				if ((this._File2 != value))
				{
					this.OnFile2Changing(value);
					this.SendPropertyChanging();
					this._File2 = value;
					this.SendPropertyChanged("File2");
					this.OnFile2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keyword", DbType="NVarChar(50)")]
		public string Keyword
		{
			get
			{
				return this._Keyword;
			}
			set
			{
				if ((this._Keyword != value))
				{
					this.OnKeywordChanging(value);
					this.SendPropertyChanging();
					this._Keyword = value;
					this.SendPropertyChanged("Keyword");
					this.OnKeywordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateDetailDescription")]
	public partial class EstateDetailDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EstateDetailID;
		
		private int _LanguageID;
		
		private string _Title;
		
		private string _SubContent;
		
		private string _Contents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEstateDetailIDChanging(int value);
    partial void OnEstateDetailIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubContentChanging(string value);
    partial void OnSubContentChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    #endregion
		
		public EstateDetailDescription()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateDetailID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EstateDetailID
		{
			get
			{
				return this._EstateDetailID;
			}
			set
			{
				if ((this._EstateDetailID != value))
				{
					this.OnEstateDetailIDChanging(value);
					this.SendPropertyChanging();
					this._EstateDetailID = value;
					this.SendPropertyChanged("EstateDetailID");
					this.OnEstateDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubContent", DbType="NVarChar(1000)")]
		public string SubContent
		{
			get
			{
				return this._SubContent;
			}
			set
			{
				if ((this._SubContent != value))
				{
					this.OnSubContentChanging(value);
					this.SendPropertyChanging();
					this._SubContent = value;
					this.SendPropertyChanged("SubContent");
					this.OnSubContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateGroupBaseCode")]
	public partial class EstateGroupBaseCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _Name;
		
		private System.Nullable<int> _ParentID;
		
		private System.Nullable<int> _SortOrder;
		
		private string _KeyWord;
		
		private EntitySet<EstateBaseCode> _EstateBaseCodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnKeyWordChanging(string value);
    partial void OnKeyWordChanged();
    #endregion
		
		public EstateGroupBaseCode()
		{
			this._EstateBaseCodes = new EntitySet<EstateBaseCode>(new Action<EstateBaseCode>(this.attach_EstateBaseCodes), new Action<EstateBaseCode>(this.detach_EstateBaseCodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyWord", DbType="NVarChar(50)")]
		public string KeyWord
		{
			get
			{
				return this._KeyWord;
			}
			set
			{
				if ((this._KeyWord != value))
				{
					this.OnKeyWordChanging(value);
					this.SendPropertyChanging();
					this._KeyWord = value;
					this.SendPropertyChanged("KeyWord");
					this.OnKeyWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EstateGroupBaseCode_EstateBaseCode", Storage="_EstateBaseCodes", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<EstateBaseCode> EstateBaseCodes
		{
			get
			{
				return this._EstateBaseCodes;
			}
			set
			{
				this._EstateBaseCodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EstateBaseCodes(EstateBaseCode entity)
		{
			this.SendPropertyChanging();
			entity.EstateGroupBaseCode = this;
		}
		
		private void detach_EstateBaseCodes(EstateBaseCode entity)
		{
			this.SendPropertyChanging();
			entity.EstateGroupBaseCode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateImages")]
	public partial class EstateImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EstateImageID;
		
		private System.Nullable<long> _EstateID;
		
		private string _FileName;
		
		private EntityRef<Estate> _Estate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEstateImageIDChanging(int value);
    partial void OnEstateImageIDChanged();
    partial void OnEstateIDChanging(System.Nullable<long> value);
    partial void OnEstateIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public EstateImage()
		{
			this._Estate = default(EntityRef<Estate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EstateImageID
		{
			get
			{
				return this._EstateImageID;
			}
			set
			{
				if ((this._EstateImageID != value))
				{
					this.OnEstateImageIDChanging(value);
					this.SendPropertyChanging();
					this._EstateImageID = value;
					this.SendPropertyChanged("EstateImageID");
					this.OnEstateImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateID", DbType="BigInt")]
		public System.Nullable<long> EstateID
		{
			get
			{
				return this._EstateID;
			}
			set
			{
				if ((this._EstateID != value))
				{
					if (this._Estate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEstateIDChanging(value);
					this.SendPropertyChanging();
					this._EstateID = value;
					this.SendPropertyChanged("EstateID");
					this.OnEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NChar(100)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estate_EstateImage", Storage="_Estate", ThisKey="EstateID", OtherKey="EstateID", IsForeignKey=true)]
		public Estate Estate
		{
			get
			{
				return this._Estate.Entity;
			}
			set
			{
				Estate previousValue = this._Estate.Entity;
				if (((previousValue != value) 
							|| (this._Estate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estate.Entity = null;
						previousValue.EstateImages.Remove(this);
					}
					this._Estate.Entity = value;
					if ((value != null))
					{
						value.EstateImages.Add(this);
						this._EstateID = value.EstateID;
					}
					else
					{
						this._EstateID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Estate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EstateRoomNumber")]
	public partial class EstateRoomNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EstateID;
		
		private System.Nullable<int> _SoPhongKhach;
		
		private System.Nullable<int> _SoPhongNgu;
		
		private System.Nullable<int> _SoPhongBep;
		
		private System.Nullable<int> _SoPhongWC;
		
		private System.Nullable<int> _SoPhongTho;
		
		private System.Nullable<int> _SoTang;
		
		private System.Nullable<int> _So1;
		
		private System.Nullable<int> _So2;
		
		private System.Nullable<int> _So3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEstateIDChanging(long value);
    partial void OnEstateIDChanged();
    partial void OnSoPhongKhachChanging(System.Nullable<int> value);
    partial void OnSoPhongKhachChanged();
    partial void OnSoPhongNguChanging(System.Nullable<int> value);
    partial void OnSoPhongNguChanged();
    partial void OnSoPhongBepChanging(System.Nullable<int> value);
    partial void OnSoPhongBepChanged();
    partial void OnSoPhongWCChanging(System.Nullable<int> value);
    partial void OnSoPhongWCChanged();
    partial void OnSoPhongThoChanging(System.Nullable<int> value);
    partial void OnSoPhongThoChanged();
    partial void OnSoTangChanging(System.Nullable<int> value);
    partial void OnSoTangChanged();
    partial void OnSo1Changing(System.Nullable<int> value);
    partial void OnSo1Changed();
    partial void OnSo2Changing(System.Nullable<int> value);
    partial void OnSo2Changed();
    partial void OnSo3Changing(System.Nullable<int> value);
    partial void OnSo3Changed();
    #endregion
		
		public EstateRoomNumber()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EstateID
		{
			get
			{
				return this._EstateID;
			}
			set
			{
				if ((this._EstateID != value))
				{
					this.OnEstateIDChanging(value);
					this.SendPropertyChanging();
					this._EstateID = value;
					this.SendPropertyChanged("EstateID");
					this.OnEstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoPhongKhach", DbType="Int")]
		public System.Nullable<int> SoPhongKhach
		{
			get
			{
				return this._SoPhongKhach;
			}
			set
			{
				if ((this._SoPhongKhach != value))
				{
					this.OnSoPhongKhachChanging(value);
					this.SendPropertyChanging();
					this._SoPhongKhach = value;
					this.SendPropertyChanged("SoPhongKhach");
					this.OnSoPhongKhachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoPhongNgu", DbType="Int")]
		public System.Nullable<int> SoPhongNgu
		{
			get
			{
				return this._SoPhongNgu;
			}
			set
			{
				if ((this._SoPhongNgu != value))
				{
					this.OnSoPhongNguChanging(value);
					this.SendPropertyChanging();
					this._SoPhongNgu = value;
					this.SendPropertyChanged("SoPhongNgu");
					this.OnSoPhongNguChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoPhongBep", DbType="Int")]
		public System.Nullable<int> SoPhongBep
		{
			get
			{
				return this._SoPhongBep;
			}
			set
			{
				if ((this._SoPhongBep != value))
				{
					this.OnSoPhongBepChanging(value);
					this.SendPropertyChanging();
					this._SoPhongBep = value;
					this.SendPropertyChanged("SoPhongBep");
					this.OnSoPhongBepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoPhongWC", DbType="Int")]
		public System.Nullable<int> SoPhongWC
		{
			get
			{
				return this._SoPhongWC;
			}
			set
			{
				if ((this._SoPhongWC != value))
				{
					this.OnSoPhongWCChanging(value);
					this.SendPropertyChanging();
					this._SoPhongWC = value;
					this.SendPropertyChanged("SoPhongWC");
					this.OnSoPhongWCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoPhongTho", DbType="Int")]
		public System.Nullable<int> SoPhongTho
		{
			get
			{
				return this._SoPhongTho;
			}
			set
			{
				if ((this._SoPhongTho != value))
				{
					this.OnSoPhongThoChanging(value);
					this.SendPropertyChanging();
					this._SoPhongTho = value;
					this.SendPropertyChanged("SoPhongTho");
					this.OnSoPhongThoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoTang", DbType="Int")]
		public System.Nullable<int> SoTang
		{
			get
			{
				return this._SoTang;
			}
			set
			{
				if ((this._SoTang != value))
				{
					this.OnSoTangChanging(value);
					this.SendPropertyChanging();
					this._SoTang = value;
					this.SendPropertyChanged("SoTang");
					this.OnSoTangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_So1", DbType="Int")]
		public System.Nullable<int> So1
		{
			get
			{
				return this._So1;
			}
			set
			{
				if ((this._So1 != value))
				{
					this.OnSo1Changing(value);
					this.SendPropertyChanging();
					this._So1 = value;
					this.SendPropertyChanged("So1");
					this.OnSo1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_So2", DbType="Int")]
		public System.Nullable<int> So2
		{
			get
			{
				return this._So2;
			}
			set
			{
				if ((this._So2 != value))
				{
					this.OnSo2Changing(value);
					this.SendPropertyChanging();
					this._So2 = value;
					this.SendPropertyChanged("So2");
					this.OnSo2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_So3", DbType="Int")]
		public System.Nullable<int> So3
		{
			get
			{
				return this._So3;
			}
			set
			{
				if ((this._So3 != value))
				{
					this.OnSo3Changing(value);
					this.SendPropertyChanging();
					this._So3 = value;
					this.SendPropertyChanged("So3");
					this.OnSo3Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
