#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PQT.DAC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "locnhungdongnai")]
	public partial class AlbumGalleryDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTAlbum(TAlbum instance);
    partial void UpdateTAlbum(TAlbum instance);
    partial void DeleteTAlbum(TAlbum instance);
    partial void InsertTAlbumCategory(TAlbumCategory instance);
    partial void UpdateTAlbumCategory(TAlbumCategory instance);
    partial void DeleteTAlbumCategory(TAlbumCategory instance);
    partial void InsertTAlbumCategoryDescription(TAlbumCategoryDescription instance);
    partial void UpdateTAlbumCategoryDescription(TAlbumCategoryDescription instance);
    partial void DeleteTAlbumCategoryDescription(TAlbumCategoryDescription instance);
    partial void InsertTAlbumDescription(TAlbumDescription instance);
    partial void UpdateTAlbumDescription(TAlbumDescription instance);
    partial void DeleteTAlbumDescription(TAlbumDescription instance);
    partial void InsertTAlbumToCategory(TAlbumToCategory instance);
    partial void UpdateTAlbumToCategory(TAlbumToCategory instance);
    partial void DeleteTAlbumToCategory(TAlbumToCategory instance);
    partial void InsertTGallery(TGallery instance);
    partial void UpdateTGallery(TGallery instance);
    partial void DeleteTGallery(TGallery instance);
    partial void InsertTGalleryDescription(TGalleryDescription instance);
    partial void UpdateTGalleryDescription(TGalleryDescription instance);
    partial void DeleteTGalleryDescription(TGalleryDescription instance);
    partial void InsertTGalleryToAlbum(TGalleryToAlbum instance);
    partial void UpdateTGalleryToAlbum(TGalleryToAlbum instance);
    partial void DeleteTGalleryToAlbum(TGalleryToAlbum instance);
    #endregion
		
		public AlbumGalleryDataDataContext() :
        base(global::PQT.DAC.Properties.Settings.Default.Quanlynhansu_nkcn_2018ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AlbumGalleryDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AlbumGalleryDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AlbumGalleryDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AlbumGalleryDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TAlbum> TAlbums
		{
			get
			{
				return this.GetTable<TAlbum>();
			}
		}
		
		public System.Data.Linq.Table<TAlbumCategory> TAlbumCategories
		{
			get
			{
				return this.GetTable<TAlbumCategory>();
			}
		}
		
		public System.Data.Linq.Table<TAlbumCategoryDescription> TAlbumCategoryDescriptions
		{
			get
			{
				return this.GetTable<TAlbumCategoryDescription>();
			}
		}
		
		public System.Data.Linq.Table<TAlbumDescription> TAlbumDescriptions
		{
			get
			{
				return this.GetTable<TAlbumDescription>();
			}
		}
		
		public System.Data.Linq.Table<TAlbumToCategory> TAlbumToCategories
		{
			get
			{
				return this.GetTable<TAlbumToCategory>();
			}
		}
		
		public System.Data.Linq.Table<TGallery> TGalleries
		{
			get
			{
				return this.GetTable<TGallery>();
			}
		}
		
		public System.Data.Linq.Table<TGalleryDescription> TGalleryDescriptions
		{
			get
			{
				return this.GetTable<TGalleryDescription>();
			}
		}
		
		public System.Data.Linq.Table<TGalleryToAlbum> TGalleryToAlbums
		{
			get
			{
				return this.GetTable<TGalleryToAlbum>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TAlbum")]
	public partial class TAlbum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlbumID;
		
		private System.Nullable<long> _Image;
		
		private System.Nullable<int> _SortOrder;
		
		private System.Nullable<int> _CountView;
		
		private System.Nullable<bool> _Status;
		
		private string _UniqueKey;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbumIDChanging(int value);
    partial void OnAlbumIDChanged();
    partial void OnImageChanging(System.Nullable<long> value);
    partial void OnImageChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnCountViewChanging(System.Nullable<int> value);
    partial void OnCountViewChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnUniqueKeyChanging(string value);
    partial void OnUniqueKeyChanged();
    partial void OnRegDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public TAlbum()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlbumID
		{
			get
			{
				return this._AlbumID;
			}
			set
			{
				if ((this._AlbumID != value))
				{
					this.OnAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumID = value;
					this.SendPropertyChanged("AlbumID");
					this.OnAlbumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="BigInt")]
		public System.Nullable<long> Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountView", DbType="Int")]
		public System.Nullable<int> CountView
		{
			get
			{
				return this._CountView;
			}
			set
			{
				if ((this._CountView != value))
				{
					this.OnCountViewChanging(value);
					this.SendPropertyChanging();
					this._CountView = value;
					this.SendPropertyChanged("CountView");
					this.OnCountViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueKey", DbType="NVarChar(50)")]
		public string UniqueKey
		{
			get
			{
				return this._UniqueKey;
			}
			set
			{
				if ((this._UniqueKey != value))
				{
					this.OnUniqueKeyChanging(value);
					this.SendPropertyChanging();
					this._UniqueKey = value;
					this.SendPropertyChanged("UniqueKey");
					this.OnUniqueKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TAlbumCategory")]
	public partial class TAlbumCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlbumCategoryID;
		
		private System.Nullable<int> _ParentID;
		
		private System.Nullable<bool> _Status;
		
		private string _UniqueKey;
		
		private System.Nullable<long> _Image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbumCategoryIDChanging(int value);
    partial void OnAlbumCategoryIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnUniqueKeyChanging(string value);
    partial void OnUniqueKeyChanged();
    partial void OnImageChanging(System.Nullable<long> value);
    partial void OnImageChanged();
    #endregion
		
		public TAlbumCategory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlbumCategoryID
		{
			get
			{
				return this._AlbumCategoryID;
			}
			set
			{
				if ((this._AlbumCategoryID != value))
				{
					this.OnAlbumCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumCategoryID = value;
					this.SendPropertyChanged("AlbumCategoryID");
					this.OnAlbumCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueKey", DbType="NVarChar(50)")]
		public string UniqueKey
		{
			get
			{
				return this._UniqueKey;
			}
			set
			{
				if ((this._UniqueKey != value))
				{
					this.OnUniqueKeyChanging(value);
					this.SendPropertyChanging();
					this._UniqueKey = value;
					this.SendPropertyChanged("UniqueKey");
					this.OnUniqueKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="BigInt")]
		public System.Nullable<long> Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TAlbumCategoryDescription")]
	public partial class TAlbumCategoryDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlbumCategoryID;
		
		private int _LanguageID;
		
		private string _Name;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbumCategoryIDChanging(int value);
    partial void OnAlbumCategoryIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TAlbumCategoryDescription()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlbumCategoryID
		{
			get
			{
				return this._AlbumCategoryID;
			}
			set
			{
				if ((this._AlbumCategoryID != value))
				{
					this.OnAlbumCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumCategoryID = value;
					this.SendPropertyChanged("AlbumCategoryID");
					this.OnAlbumCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TAlbumDescription")]
	public partial class TAlbumDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlbumID;
		
		private int _LanguageID;
		
		private string _Name;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbumIDChanging(int value);
    partial void OnAlbumIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TAlbumDescription()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlbumID
		{
			get
			{
				return this._AlbumID;
			}
			set
			{
				if ((this._AlbumID != value))
				{
					this.OnAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumID = value;
					this.SendPropertyChanged("AlbumID");
					this.OnAlbumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TAlbumToCategory")]
	public partial class TAlbumToCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlbumCategoryID;
		
		private int _AlbumID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbumCategoryIDChanging(int value);
    partial void OnAlbumCategoryIDChanged();
    partial void OnAlbumIDChanging(int value);
    partial void OnAlbumIDChanged();
    #endregion
		
		public TAlbumToCategory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlbumCategoryID
		{
			get
			{
				return this._AlbumCategoryID;
			}
			set
			{
				if ((this._AlbumCategoryID != value))
				{
					this.OnAlbumCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumCategoryID = value;
					this.SendPropertyChanged("AlbumCategoryID");
					this.OnAlbumCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlbumID
		{
			get
			{
				return this._AlbumID;
			}
			set
			{
				if ((this._AlbumID != value))
				{
					this.OnAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumID = value;
					this.SendPropertyChanged("AlbumID");
					this.OnAlbumIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TGallery")]
	public partial class TGallery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _GalleryID;
		
		private System.Nullable<System.DateTime> _RegDate;
		
		private string _Size;
		
		private System.Nullable<int> _FileSize;
		
		private System.Nullable<int> _CountView;
		
		private System.Nullable<int> _CountDown;
		
		private string _Resolution;
		
		private System.Nullable<int> _AdminLike;
		
		private System.Nullable<long> _Img;
		
		private System.Nullable<int> _SortOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGalleryIDChanging(long value);
    partial void OnGalleryIDChanged();
    partial void OnRegDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegDateChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnFileSizeChanging(System.Nullable<int> value);
    partial void OnFileSizeChanged();
    partial void OnCountViewChanging(System.Nullable<int> value);
    partial void OnCountViewChanged();
    partial void OnCountDownChanging(System.Nullable<int> value);
    partial void OnCountDownChanged();
    partial void OnResolutionChanging(string value);
    partial void OnResolutionChanged();
    partial void OnAdminLikeChanging(System.Nullable<int> value);
    partial void OnAdminLikeChanged();
    partial void OnImgChanging(System.Nullable<long> value);
    partial void OnImgChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    #endregion
		
		public TGallery()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GalleryID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long GalleryID
		{
			get
			{
				return this._GalleryID;
			}
			set
			{
				if ((this._GalleryID != value))
				{
					this.OnGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryID = value;
					this.SendPropertyChanged("GalleryID");
					this.OnGalleryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegDate
		{
			get
			{
				return this._RegDate;
			}
			set
			{
				if ((this._RegDate != value))
				{
					this.OnRegDateChanging(value);
					this.SendPropertyChanging();
					this._RegDate = value;
					this.SendPropertyChanged("RegDate");
					this.OnRegDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="NVarChar(50)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileSize", DbType="Int")]
		public System.Nullable<int> FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountView", DbType="Int")]
		public System.Nullable<int> CountView
		{
			get
			{
				return this._CountView;
			}
			set
			{
				if ((this._CountView != value))
				{
					this.OnCountViewChanging(value);
					this.SendPropertyChanging();
					this._CountView = value;
					this.SendPropertyChanged("CountView");
					this.OnCountViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountDown", DbType="Int")]
		public System.Nullable<int> CountDown
		{
			get
			{
				return this._CountDown;
			}
			set
			{
				if ((this._CountDown != value))
				{
					this.OnCountDownChanging(value);
					this.SendPropertyChanging();
					this._CountDown = value;
					this.SendPropertyChanged("CountDown");
					this.OnCountDownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resolution", DbType="NVarChar(50)")]
		public string Resolution
		{
			get
			{
				return this._Resolution;
			}
			set
			{
				if ((this._Resolution != value))
				{
					this.OnResolutionChanging(value);
					this.SendPropertyChanging();
					this._Resolution = value;
					this.SendPropertyChanged("Resolution");
					this.OnResolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminLike", DbType="Int")]
		public System.Nullable<int> AdminLike
		{
			get
			{
				return this._AdminLike;
			}
			set
			{
				if ((this._AdminLike != value))
				{
					this.OnAdminLikeChanging(value);
					this.SendPropertyChanging();
					this._AdminLike = value;
					this.SendPropertyChanged("AdminLike");
					this.OnAdminLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img", DbType="BigInt")]
		public System.Nullable<long> Img
		{
			get
			{
				return this._Img;
			}
			set
			{
				if ((this._Img != value))
				{
					this.OnImgChanging(value);
					this.SendPropertyChanging();
					this._Img = value;
					this.SendPropertyChanged("Img");
					this.OnImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TGalleryDescription")]
	public partial class TGalleryDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _GalleryID;
		
		private int _LanguageID;
		
		private string _Name;
		
		private string _Description;
		
		private string _MoTa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGalleryIDChanging(long value);
    partial void OnGalleryIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    #endregion
		
		public TGalleryDescription()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GalleryID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GalleryID
		{
			get
			{
				return this._GalleryID;
			}
			set
			{
				if ((this._GalleryID != value))
				{
					this.OnGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryID = value;
					this.SendPropertyChanged("GalleryID");
					this.OnGalleryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NVarChar(MAX)")]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TGalleryToAlbum")]
	public partial class TGalleryToAlbum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _GalleryID;
		
		private int _AlbumID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGalleryIDChanging(long value);
    partial void OnGalleryIDChanged();
    partial void OnAlbumIDChanging(int value);
    partial void OnAlbumIDChanged();
    #endregion
		
		public TGalleryToAlbum()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GalleryID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GalleryID
		{
			get
			{
				return this._GalleryID;
			}
			set
			{
				if ((this._GalleryID != value))
				{
					this.OnGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryID = value;
					this.SendPropertyChanged("GalleryID");
					this.OnGalleryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlbumID
		{
			get
			{
				return this._AlbumID;
			}
			set
			{
				if ((this._AlbumID != value))
				{
					this.OnAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumID = value;
					this.SendPropertyChanged("AlbumID");
					this.OnAlbumIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
